// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: doctorservice/doctor.proto

package doctorservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DoctorService_GetDoctors_FullMethodName           = "/doctorservice.DoctorService/GetDoctors"
	DoctorService_GetDoctor_FullMethodName            = "/doctorservice.DoctorService/GetDoctor"
	DoctorService_CreateDoctor_FullMethodName         = "/doctorservice.DoctorService/CreateDoctor"
	DoctorService_UpdateDoctor_FullMethodName         = "/doctorservice.DoctorService/UpdateDoctor"
	DoctorService_DeleteDoctor_FullMethodName         = "/doctorservice.DoctorService/DeleteDoctor"
	DoctorService_GetDoctorSchedule_FullMethodName    = "/doctorservice.DoctorService/GetDoctorSchedule"
	DoctorService_UpdateDoctorSchedule_FullMethodName = "/doctorservice.DoctorService/UpdateDoctorSchedule"
)

// DoctorServiceClient is the client API for DoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Doctor service
type DoctorServiceClient interface {
	GetDoctors(ctx context.Context, in *GetDoctorsRequest, opts ...grpc.CallOption) (*GetDoctorsResponse, error)
	GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error)
	CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error)
	UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error)
	DeleteDoctor(ctx context.Context, in *DeleteDoctorRequest, opts ...grpc.CallOption) (*DeleteDoctorResponse, error)
	GetDoctorSchedule(ctx context.Context, in *GetDoctorScheduleRequest, opts ...grpc.CallOption) (*GetDoctorScheduleResponse, error)
	UpdateDoctorSchedule(ctx context.Context, in *UpdateDoctorScheduleRequest, opts ...grpc.CallOption) (*UpdateDoctorScheduleResponse, error)
}

type doctorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorServiceClient(cc grpc.ClientConnInterface) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) GetDoctors(ctx context.Context, in *GetDoctorsRequest, opts ...grpc.CallOption) (*GetDoctorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorsResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetDoctors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_CreateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_UpdateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DeleteDoctor(ctx context.Context, in *DeleteDoctorRequest, opts ...grpc.CallOption) (*DeleteDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDoctorResponse)
	err := c.cc.Invoke(ctx, DoctorService_DeleteDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetDoctorSchedule(ctx context.Context, in *GetDoctorScheduleRequest, opts ...grpc.CallOption) (*GetDoctorScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorScheduleResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetDoctorSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) UpdateDoctorSchedule(ctx context.Context, in *UpdateDoctorScheduleRequest, opts ...grpc.CallOption) (*UpdateDoctorScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDoctorScheduleResponse)
	err := c.cc.Invoke(ctx, DoctorService_UpdateDoctorSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServiceServer is the server API for DoctorService service.
// All implementations must embed UnimplementedDoctorServiceServer
// for forward compatibility.
//
// Doctor service
type DoctorServiceServer interface {
	GetDoctors(context.Context, *GetDoctorsRequest) (*GetDoctorsResponse, error)
	GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error)
	CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error)
	UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error)
	DeleteDoctor(context.Context, *DeleteDoctorRequest) (*DeleteDoctorResponse, error)
	GetDoctorSchedule(context.Context, *GetDoctorScheduleRequest) (*GetDoctorScheduleResponse, error)
	UpdateDoctorSchedule(context.Context, *UpdateDoctorScheduleRequest) (*UpdateDoctorScheduleResponse, error)
	mustEmbedUnimplementedDoctorServiceServer()
}

// UnimplementedDoctorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoctorServiceServer struct{}

func (UnimplementedDoctorServiceServer) GetDoctors(context.Context, *GetDoctorsRequest) (*GetDoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctors not implemented")
}
func (UnimplementedDoctorServiceServer) GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) DeleteDoctor(context.Context, *DeleteDoctorRequest) (*DeleteDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctor not implemented")
}
func (UnimplementedDoctorServiceServer) GetDoctorSchedule(context.Context, *GetDoctorScheduleRequest) (*GetDoctorScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorSchedule not implemented")
}
func (UnimplementedDoctorServiceServer) UpdateDoctorSchedule(context.Context, *UpdateDoctorScheduleRequest) (*UpdateDoctorScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorSchedule not implemented")
}
func (UnimplementedDoctorServiceServer) mustEmbedUnimplementedDoctorServiceServer() {}
func (UnimplementedDoctorServiceServer) testEmbeddedByValue()                       {}

// UnsafeDoctorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServiceServer will
// result in compilation errors.
type UnsafeDoctorServiceServer interface {
	mustEmbedUnimplementedDoctorServiceServer()
}

func RegisterDoctorServiceServer(s grpc.ServiceRegistrar, srv DoctorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDoctorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DoctorService_ServiceDesc, srv)
}

func _DoctorService_GetDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetDoctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetDoctors(ctx, req.(*GetDoctorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetDoctor(ctx, req.(*GetDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_CreateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).CreateDoctor(ctx, req.(*CreateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_UpdateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).UpdateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_UpdateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).UpdateDoctor(ctx, req.(*UpdateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DeleteDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DeleteDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_DeleteDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DeleteDoctor(ctx, req.(*DeleteDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetDoctorSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetDoctorSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetDoctorSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetDoctorSchedule(ctx, req.(*GetDoctorScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_UpdateDoctorSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).UpdateDoctorSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_UpdateDoctorSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).UpdateDoctorSchedule(ctx, req.(*UpdateDoctorScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorService_ServiceDesc is the grpc.ServiceDesc for DoctorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doctorservice.DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDoctors",
			Handler:    _DoctorService_GetDoctors_Handler,
		},
		{
			MethodName: "GetDoctor",
			Handler:    _DoctorService_GetDoctor_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _DoctorService_CreateDoctor_Handler,
		},
		{
			MethodName: "UpdateDoctor",
			Handler:    _DoctorService_UpdateDoctor_Handler,
		},
		{
			MethodName: "DeleteDoctor",
			Handler:    _DoctorService_DeleteDoctor_Handler,
		},
		{
			MethodName: "GetDoctorSchedule",
			Handler:    _DoctorService_GetDoctorSchedule_Handler,
		},
		{
			MethodName: "UpdateDoctorSchedule",
			Handler:    _DoctorService_UpdateDoctorSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctorservice/doctor.proto",
}
